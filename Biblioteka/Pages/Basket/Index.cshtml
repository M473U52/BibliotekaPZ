@page
@model Biblioteka.Pages.Basket.IndexModel
@{
    ViewData["Title"] = "Index";
}

@using Microsoft.AspNetCore.Identity


<div class="main_container">
    <div class="inner_container">
        <div class="list_header">
            <h2>Twój koszyk</h2>
        </div>       
        <div class="list_div"></div>
        <div class="form-group">
        </div>
        <div class="inner_container" >
            <form method="post" onsubmit="return validateDate()">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label for="newDate" class="control-label">Podaj datę wypożyczenia:</label>
                    <input asp-for="newDate" class="form-control" id="newDate" />
                    <span asp-validation-for="newDate" class="text-danger"></span>
                </div>
            </form>
            <button id="basketButtonFinalize" class="button buttonGreen" onclick="finalizeBasket()">Finalizuj <i class="fa-solid fa-basket-shopping" style="color: #ffffff;"></i></button>
        </div>
       
    </div>

</div>


@section Scripts {

    <script>
        function displayBasket() {
            const basket = JSON.parse(sessionStorage.getItem('basket')) || [];
            const basketItemsTable = document.querySelector("#basketTable");
            const basketItemsContainer = document.querySelector(".list_div");
            const basketButton = document.querySelector("#basketButtonFinalize");

            if (basket.length === 0) {
                const imagePath = '@Url.Content("~/images/basketisempty.png")';
                basketItemsContainer.innerHTML = '<img src="' + imagePath + '" style="position:relative;width: 100%;height: auto;" />';

                basketButton.style.display = 'none';

                return;
            }
            else { 

                basketButton.style.display = 'block';
                basketButton.style.textAlign = 'center';
            }



            const mainHtml = `<div class="table-responsive">
                    <table class="tableToModify">
                        <tr>
                            <th>Książka</th>
                        </tr>
                        ${basket.map((item) => `
                            <tr>
                                <td>${item.book.title}</td>
                                
                            </tr>
                        `).join('')}
                    </table>
                </div>`;

            basketItemsContainer.innerHTML =  mainHtml;

            console.log(basket);
            console.log(sessionStorage);
        }
        function validateDate() {
            var today = new Date();
            var selectedDate = new Date(document.getElementById('newDate').value);
            if (selectedDate < today) {
                alert("Data wypożyczenia nie może być wcześniejsza niż dzisiejsza data.");
                return false;
            }
            return true;
        }

        function finalizeBasket() {
            if (!validateDate()) {
                return;
            }
            var b = sessionStorage.getItem('basket');
            console.log(b);
            var basket = JSON.parse(sessionStorage.getItem('basket')) || [];
            console.log(basket);
            var bookIds = basket.map(item => item.bookId).join(', ');
            //alert(basket.bookIds);
            console.log(bookIds);

            if (basket.length === 0) {
                alert("Koszyk jest pusty");
                return;
            }

            fetch('/Basket/Index?handler=Finalize', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                },
                body: JSON.stringify(basket)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Wypozyczenia zostaly zrealizowane");
                    } else {
                        alert("Przynajmniej jedno wypozyczenie nie zostalo zrealizowane. Limit wypozyczen wynosi 5. Sprawdz aktualne wypozycznia w zakladce wypozyczen");
                    }
                });
            sessionStorage.clear();
        }
        displayBasket();
    </script>
}
