// <auto-generated />
using System;
using Biblioteka.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteka.Migrations
{
    [DbContext(typeof(BibContext))]
    [Migration("20240507092237_migracjatestowa")]
    partial class migracjatestowa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 30);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Biblioteka.Areas.Identity.Data.BibUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("profilePicData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Biblioteka.Models.Author", b =>
                {
                    b.Property<decimal>("authorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(3)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("authorId"));

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("country")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("imageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("nickname")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("authorId");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            authorId = 1m,
                            birthDate = new DateTime(1892, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Wielka Brytania",
                            description = "niesamowity pisarz",
                            email = "jrtolkien@tolkien.com",
                            name = "J.R.R",
                            nickname = "JRR",
                            surname = "Tolkien"
                        },
                        new
                        {
                            authorId = 2m,
                            birthDate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Wielka Brytania",
                            description = "niesamowita pisarka",
                            email = "jkrowling@rowling.com",
                            name = "J.K",
                            nickname = "Jo Rowling",
                            surname = "Rowling"
                        },
                        new
                        {
                            authorId = 3m,
                            birthDate = new DateTime(1948, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Polska",
                            description = "wiedźmin jakich mało",
                            email = "papawiedzmin@gmail.com",
                            name = "Andrzej",
                            nickname = "Sapek",
                            surname = "Sapkowski"
                        },
                        new
                        {
                            authorId = 4m,
                            birthDate = new DateTime(1947, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Stany Zjednoczone",
                            description = "super pisarz",
                            email = "stking@stking.com",
                            name = "Stephen",
                            nickname = "St King",
                            surname = "King"
                        },
                        new
                        {
                            authorId = 5m,
                            birthDate = new DateTime(1798, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Polska",
                            description = "trochę pali",
                            email = "amickiewicz@mickifan.com",
                            name = "Adam",
                            nickname = "A Micki",
                            surname = "Mickiewicz"
                        },
                        new
                        {
                            authorId = 6m,
                            birthDate = new DateTime(1846, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Polska",
                            description = "Henryk Adam Aleksander Pius Sienkiewicz",
                            email = "czlowiekpuszczy@gmail.com",
                            name = "Henryk",
                            nickname = "Litwos",
                            surname = "Sienkiwicz"
                        },
                        new
                        {
                            authorId = 7m,
                            birthDate = new DateTime(1911, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Polska",
                            description = "czesław aż miło",
                            email = "czesio123@yahoo.com",
                            name = "Czesław",
                            nickname = "Czesio",
                            surname = "Miłosz"
                        },
                        new
                        {
                            authorId = 8m,
                            birthDate = new DateTime(1898, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Polska",
                            description = "nic nie powie ale napisze",
                            email = "aniemowilem@gmail.com",
                            name = "Adam",
                            nickname = "...",
                            surname = "Niemowa"
                        },
                        new
                        {
                            authorId = 9m,
                            birthDate = new DateTime(1942, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Wielka Brytania",
                            description = "giga mózg ale książki też pisał",
                            email = "blackhole@gmail.com",
                            name = "Stephen",
                            nickname = "Stephen",
                            surname = "Hawking"
                        },
                        new
                        {
                            authorId = 10m,
                            birthDate = new DateTime(1948, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            country = "Stany Zjednoczone",
                            description = "gra o tron ale nie gra w gry",
                            email = "grrmartin@grrmartin.com",
                            name = "George R.R",
                            nickname = "GRRR",
                            surname = "Martin"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.Property<decimal>("bookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(4)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("bookId"));

                    b.Property<decimal>("ISBN")
                        .HasColumnType("NUMERIC(13)");

                    b.Property<decimal>("alley")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<decimal>("availableCopys")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte[]>("ebookData")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("floor")
                        .HasColumnType("NUMERIC(1)");

                    b.Property<decimal>("genreId")
                        .HasColumnType("NUMERIC(2,0)");

                    b.Property<byte[]>("imageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("publisherId")
                        .HasColumnType("NUMERIC(3,0)");

                    b.Property<decimal?>("ratingAVG")
                        .HasColumnType("NUMERIC(3,2)");

                    b.Property<int>("ratingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("rowNumber")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("typeId")
                        .HasColumnType("NUMERIC(1,0)");

                    b.HasKey("bookId");

                    b.HasIndex("genreId");

                    b.HasIndex("publisherId");

                    b.HasIndex("typeId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            bookId = 1m,
                            ISBN = 4789305434712m,
                            alley = 0m,
                            availableCopys = 14m,
                            description = "super hit o hobbitach",
                            floor = 0m,
                            genreId = 1m,
                            publisherId = 1m,
                            ratingId = 1,
                            releaseDate = new DateTime(1954, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            rowNumber = 0m,
                            title = "Władca Pierścieni",
                            typeId = 1m
                        },
                        new
                        {
                            bookId = 2m,
                            ISBN = 8495208934212m,
                            alley = 0m,
                            availableCopys = 6m,
                            description = "bo Ikar był zbrodniarzem",
                            floor = 0m,
                            genreId = 2m,
                            publisherId = 2m,
                            ratingId = 2,
                            releaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            rowNumber = 0m,
                            title = "Zbrodnia Ikara",
                            typeId = 2m
                        },
                        new
                        {
                            bookId = 3m,
                            ISBN = 3489012343021m,
                            alley = 0m,
                            availableCopys = 26m,
                            description = "Geralt ze szkoły wilka, historia prawdziwa",
                            floor = 0m,
                            genreId = 3m,
                            publisherId = 3m,
                            ratingId = 3,
                            releaseDate = new DateTime(1975, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            rowNumber = 0m,
                            title = "Wiedźmin",
                            typeId = 3m
                        },
                        new
                        {
                            bookId = 4m,
                            ISBN = 9321734921412m,
                            alley = 0m,
                            availableCopys = 11m,
                            description = "o księciu który był naprawdę mały",
                            floor = 0m,
                            genreId = 4m,
                            publisherId = 4m,
                            ratingId = 4,
                            releaseDate = new DateTime(1987, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            rowNumber = 0m,
                            title = "Mały Książe",
                            typeId = 4m
                        },
                        new
                        {
                            bookId = 5m,
                            ISBN = 8940237032412m,
                            alley = 0m,
                            availableCopys = 16m,
                            description = "powieść o pół hobbicie a pół elfie",
                            floor = 0m,
                            genreId = 5m,
                            publisherId = 5m,
                            ratingId = 5,
                            releaseDate = new DateTime(2009, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            rowNumber = 0m,
                            title = "Władca Pierścieni cz. 4",
                            typeId = 5m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.BookType", b =>
                {
                    b.Property<decimal>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(1)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("typeId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("typeId");

                    b.ToTable("BookType");

                    b.HasData(
                        new
                        {
                            typeId = 1m,
                            name = "typ1"
                        },
                        new
                        {
                            typeId = 2m,
                            name = "typ2"
                        },
                        new
                        {
                            typeId = 3m,
                            name = "typ3"
                        },
                        new
                        {
                            typeId = 4m,
                            name = "typ4"
                        },
                        new
                        {
                            typeId = 5m,
                            name = "typ5"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Author", b =>
                {
                    b.Property<decimal>("bookId")
                        .HasColumnType("NUMERIC(4,0)");

                    b.Property<decimal>("authorId")
                        .HasColumnType("NUMERIC(3,0)");

                    b.HasKey("bookId", "authorId");

                    b.HasIndex("authorId");

                    b.ToTable("Book_Author", (string)null);

                    b.HasData(
                        new
                        {
                            bookId = 1m,
                            authorId = 1m
                        },
                        new
                        {
                            bookId = 1m,
                            authorId = 2m
                        },
                        new
                        {
                            bookId = 2m,
                            authorId = 3m
                        },
                        new
                        {
                            bookId = 3m,
                            authorId = 3m
                        },
                        new
                        {
                            bookId = 4m,
                            authorId = 4m
                        },
                        new
                        {
                            bookId = 5m,
                            authorId = 5m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Opinions", b =>
                {
                    b.Property<decimal>("bookId")
                        .HasColumnType("NUMERIC(4,0)");

                    b.Property<decimal>("readerId")
                        .HasColumnType("NUMERIC(4,0)");

                    b.Property<DateTime?>("addedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("opinion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("rating")
                        .HasColumnType("NUMERIC(3,2)");

                    b.HasKey("bookId", "readerId");

                    b.HasIndex("readerId");

                    b.ToTable("Book_Opinions", (string)null);

                    b.HasData(
                        new
                        {
                            bookId = 1m,
                            readerId = 1m,
                            addedDate = new DateTime(2024, 4, 14, 14, 22, 37, 482, DateTimeKind.Local).AddTicks(166),
                            opinion = "niesmowicie wciągająca książka",
                            rating = 5m
                        },
                        new
                        {
                            bookId = 2m,
                            readerId = 2m,
                            addedDate = new DateTime(2024, 4, 25, 15, 22, 37, 482, DateTimeKind.Local).AddTicks(210),
                            opinion = "taka sobie",
                            rating = 2m
                        },
                        new
                        {
                            bookId = 3m,
                            readerId = 3m,
                            addedDate = new DateTime(2024, 5, 4, 20, 22, 37, 482, DateTimeKind.Local).AddTicks(213),
                            opinion = "nawet fajna ale czasem za długie opisy",
                            rating = 4m
                        },
                        new
                        {
                            bookId = 4m,
                            readerId = 4m,
                            addedDate = new DateTime(2024, 5, 2, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(216),
                            opinion = "beznadziejna",
                            rating = 1m
                        },
                        new
                        {
                            bookId = 4m,
                            readerId = 5m,
                            addedDate = new DateTime(2024, 5, 7, 8, 22, 37, 482, DateTimeKind.Local).AddTicks(219),
                            opinion = "mi się nawet podoba",
                            rating = 3m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Tag", b =>
                {
                    b.Property<decimal>("bookId")
                        .HasColumnType("NUMERIC(4,0)");

                    b.Property<decimal>("tagId")
                        .HasColumnType("NUMERIC(2,0)");

                    b.HasKey("bookId", "tagId");

                    b.HasIndex("tagId");

                    b.ToTable("Book_Tag", (string)null);

                    b.HasData(
                        new
                        {
                            bookId = 1m,
                            tagId = 1m
                        },
                        new
                        {
                            bookId = 2m,
                            tagId = 2m
                        },
                        new
                        {
                            bookId = 3m,
                            tagId = 3m
                        },
                        new
                        {
                            bookId = 4m,
                            tagId = 4m
                        },
                        new
                        {
                            bookId = 5m,
                            tagId = 5m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Borrowing", b =>
                {
                    b.Property<decimal>("borrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(5)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("borrowId"));

                    b.Property<bool>("Confirmation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<decimal>("LateFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("bookId")
                        .HasColumnType("NUMERIC(4,0)");

                    b.Property<bool>("bookLost")
                        .HasColumnType("bit");

                    b.Property<DateTime>("borrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("employeeConfirmingPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("employeeConfirmingReturnId")
                        .HasColumnType("int");

                    b.Property<decimal>("employeeId")
                        .HasColumnType("NUMERIC(2,0)");

                    b.Property<DateTime>("plannedReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("returnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("borrowId");

                    b.HasIndex("bookId");

                    b.HasIndex("employeeConfirmingPaymentId");

                    b.HasIndex("employeeConfirmingReturnId")
                        .HasDatabaseName("IX_Borrowing_employeeConfirm~1");

                    b.HasIndex("employeeId");

                    b.ToTable("Borrowing");

                    b.HasData(
                        new
                        {
                            borrowId = 1m,
                            Confirmation = false,
                            IsPaid = false,
                            IsReturned = false,
                            LateFee = 0m,
                            bookId = 1m,
                            bookLost = false,
                            borrowDate = new DateTime(2024, 5, 7, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(386),
                            employeeId = 1m,
                            plannedReturnDate = new DateTime(2024, 6, 7, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(389)
                        },
                        new
                        {
                            borrowId = 2m,
                            Confirmation = false,
                            IsPaid = false,
                            IsReturned = false,
                            LateFee = 3m,
                            bookId = 2m,
                            bookLost = false,
                            borrowDate = new DateTime(2024, 4, 4, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(396),
                            employeeId = 2m,
                            plannedReturnDate = new DateTime(2024, 5, 7, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(398)
                        },
                        new
                        {
                            borrowId = 3m,
                            Confirmation = false,
                            IsPaid = false,
                            IsReturned = false,
                            LateFee = 0m,
                            bookId = 3m,
                            bookLost = false,
                            borrowDate = new DateTime(2024, 4, 22, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(402),
                            employeeId = 3m,
                            plannedReturnDate = new DateTime(2024, 5, 23, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(404)
                        },
                        new
                        {
                            borrowId = 4m,
                            Confirmation = true,
                            IsPaid = false,
                            IsReturned = false,
                            LateFee = 0m,
                            bookId = 4m,
                            bookLost = true,
                            borrowDate = new DateTime(2024, 5, 1, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(407),
                            employeeId = 4m,
                            plannedReturnDate = new DateTime(2024, 6, 1, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(409),
                            returnDate = new DateTime(2024, 6, 7, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(411)
                        },
                        new
                        {
                            borrowId = 5m,
                            Confirmation = false,
                            IsPaid = false,
                            IsReturned = true,
                            LateFee = 0m,
                            bookId = 5m,
                            bookLost = false,
                            borrowDate = new DateTime(2024, 5, 5, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(414),
                            employeeId = 5m,
                            plannedReturnDate = new DateTime(2024, 6, 5, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(416),
                            returnDate = new DateTime(2024, 5, 27, 11, 22, 37, 482, DateTimeKind.Local).AddTicks(418)
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Employee", b =>
                {
                    b.Property<decimal>("employeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(2)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("employeeId"));

                    b.Property<DateTime>("dateOfEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("positionId")
                        .HasColumnType("NUMERIC(1,0)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("employeeId");

                    b.HasIndex("positionId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            employeeId = 1m,
                            dateOfEmployment = new DateTime(2022, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "janusz.kowalski@gmail.com",
                            name = "Janusz",
                            positionId = 1m,
                            surname = "Kowalski"
                        },
                        new
                        {
                            employeeId = 2m,
                            dateOfEmployment = new DateTime(2016, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "koblik@koblik.com",
                            name = "Katarzyna",
                            positionId = 2m,
                            surname = "Oblik"
                        },
                        new
                        {
                            employeeId = 3m,
                            dateOfEmployment = new DateTime(2018, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "wykrok.j@gmail.com",
                            name = "Jędrzej",
                            positionId = 3m,
                            surname = "Wykrok"
                        },
                        new
                        {
                            employeeId = 4m,
                            dateOfEmployment = new DateTime(2017, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "barnowak@gmail.com",
                            name = "Barbara",
                            positionId = 4m,
                            surname = "Nowak"
                        },
                        new
                        {
                            employeeId = 5m,
                            dateOfEmployment = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "slimakBoss@legenda.pl",
                            name = "Kamil",
                            positionId = 5m,
                            surname = "Ślimak"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeConfirmingPayment", b =>
                {
                    b.Property<int>("employeeConfirmingPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("employeeConfirmingPaymentId"));

                    b.Property<decimal?>("employeeId")
                        .HasColumnType("NUMERIC(2,0)");

                    b.HasKey("employeeConfirmingPaymentId");

                    b.HasIndex("employeeId");

                    b.ToTable("EmployeeConfirmingPaymentsBook");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeConfirmingReturn", b =>
                {
                    b.Property<int>("employeeConfirmingReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("employeeConfirmingReturnId"));

                    b.Property<decimal?>("employeeId")
                        .HasColumnType("NUMERIC(2,0)");

                    b.HasKey("employeeConfirmingReturnId");

                    b.HasIndex("employeeId");

                    b.ToTable("EmployeeConfirmingReturnsBook");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeData", b =>
                {
                    b.Property<decimal>("employeeId")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("houseNumber")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<decimal>("pesel")
                        .HasColumnType("NUMERIC(11)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("town")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("zipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("employeeId");

                    b.ToTable("EmployeeData");

                    b.HasData(
                        new
                        {
                            employeeId = 1m,
                            birthDate = new DateTime(1999, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            houseNumber = 32m,
                            pesel = 1101102223m,
                            phoneNumber = "743 934 324",
                            street = "Kieliszkowska 12",
                            town = "Białystok",
                            zipCode = "15-123"
                        },
                        new
                        {
                            employeeId = 2m,
                            birthDate = new DateTime(2000, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            houseNumber = 3m,
                            pesel = 1101102223m,
                            phoneNumber = "732 438 553",
                            street = "Piastowska 19",
                            town = "Sokółka",
                            zipCode = "16-132"
                        },
                        new
                        {
                            employeeId = 3m,
                            birthDate = new DateTime(1974, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            houseNumber = 7m,
                            pesel = 1101102223m,
                            phoneNumber = "832 890 436",
                            street = "Lipowa 3",
                            town = "Łomża",
                            zipCode = "17-154"
                        },
                        new
                        {
                            employeeId = 4m,
                            birthDate = new DateTime(1983, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            houseNumber = 32m,
                            pesel = 1101102223m,
                            phoneNumber = "683 690 268",
                            street = "Wyrobiskowa 8",
                            town = "Białystok",
                            zipCode = "15-136"
                        },
                        new
                        {
                            employeeId = 5m,
                            birthDate = new DateTime(1666, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            houseNumber = 666m,
                            pesel = 2137100420m,
                            phoneNumber = "666 666 666",
                            street = "Odwrotna 15",
                            town = "Hel",
                            zipCode = "15-666"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Event", b =>
                {
                    b.Property<decimal>("eventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(3)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("eventId"));

                    b.Property<decimal>("authorId")
                        .HasColumnType("NUMERIC(3,0)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("eventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("eventId");

                    b.HasIndex("authorId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            eventId = 1m,
                            authorId = 1m,
                            description = "spotkanie fanów książek autora numer 1 ale nazywa się inaczej tylko nie chciało mi się sprawdzić bo długo by scrollować",
                            eventDate = new DateTime(2024, 5, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            name = "Spotkanie fanów książek"
                        },
                        new
                        {
                            eventId = 2m,
                            authorId = 4m,
                            description = "spotkanie antyfanów książek a autor numer 4 będzie ich zachęcał aby czytali",
                            eventDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            name = "Spotkanie antyfanów książek"
                        },
                        new
                        {
                            eventId = 3m,
                            authorId = 8m,
                            description = "Autor Adam Niemowa będzie rozdawał autografy ale nie można do niego mówić bo sobie tego nie życzy i wtedy nie da autografu ",
                            eventDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            name = "Podpisywanie książek"
                        },
                        new
                        {
                            eventId = 4m,
                            authorId = 3m,
                            description = "Konkurs w którym udział może wziąć każdy. Uczestnicy będą mieli 1h na napisanie rozdziału, który zostanie nastepnie oceniony. Czekają na Was wspaniałe nagrody!",
                            eventDate = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            name = "Konkurs pisania na czas"
                        },
                        new
                        {
                            eventId = 5m,
                            authorId = 9m,
                            description = "Nauczymy się jak poprawnie pisać. Żerzuha a może rzeżuha czy żeżucha bądź rzerzucha? Na spotkaniu to oraz wiele wiedzy więcej.",
                            eventDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            name = "Dyktando"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.FAQ", b =>
                {
                    b.Property<decimal>("FAQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(3)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("FAQId"));

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FAQId");

                    b.ToTable("FAQ");

                    b.HasData(
                        new
                        {
                            FAQId = 1m,
                            answer = "aby wypożyczyć książkę należy najpierw się zalogować a następnie wejść w księgozbior i nacisnąć wypożycz jeśli jest wystarczająca ilość egzemplarzy. książka zostanie dodana do koszyka i będzie można wybrać datę jej wypożyczenia.",
                            question = "jak wypożyczyć książkę?"
                        },
                        new
                        {
                            FAQId = 2m,
                            answer = "jak nie wiesz to sobie poklikaj i posprawdzaj. nie mam całej nocy na pisanie tej sekcji ;)",
                            question = "jak cośtam?"
                        },
                        new
                        {
                            FAQId = 3m,
                            answer = "trzeba szybko i kilkukrotnie nacisnąć kombinację klawiszy ALT + F4",
                            question = "jak się wylogować z konta?"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Genre", b =>
                {
                    b.Property<decimal>("genreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(2)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("genreId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("genreId");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            genreId = 1m,
                            name = "Przygodowe"
                        },
                        new
                        {
                            genreId = 2m,
                            name = "Akcji"
                        },
                        new
                        {
                            genreId = 3m,
                            name = "Dramat"
                        },
                        new
                        {
                            genreId = 4m,
                            name = "Fanstasy"
                        },
                        new
                        {
                            genreId = 5m,
                            name = "Science fiction"
                        },
                        new
                        {
                            genreId = 6m,
                            name = "Horror"
                        },
                        new
                        {
                            genreId = 7m,
                            name = "Komedia"
                        },
                        new
                        {
                            genreId = 8m,
                            name = "Historyczne"
                        },
                        new
                        {
                            genreId = 9m,
                            name = "Dokumentalne"
                        },
                        new
                        {
                            genreId = 10m,
                            name = "Dla dzieci"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Position", b =>
                {
                    b.Property<decimal>("positionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(1)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("positionId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("salary")
                        .HasColumnType("NUMERIC(4)");

                    b.HasKey("positionId");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            positionId = 1m,
                            name = "barista",
                            salary = 2100m
                        },
                        new
                        {
                            positionId = 2m,
                            name = "barista pomocniczy",
                            salary = 2200m
                        },
                        new
                        {
                            positionId = 3m,
                            name = "recepcjonista",
                            salary = 2600m
                        },
                        new
                        {
                            positionId = 4m,
                            name = "st. recepcjonista",
                            salary = 2851m
                        },
                        new
                        {
                            positionId = 5m,
                            name = "szef pracowników",
                            salary = 6666m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Publisher", b =>
                {
                    b.Property<decimal>("publisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(3)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("publisherId"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("publisherId");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            publisherId = 1m,
                            description = "tak",
                            name = "wydawnictwo igła"
                        },
                        new
                        {
                            publisherId = 2m,
                            description = "opis2",
                            name = "wydawnictwo2"
                        },
                        new
                        {
                            publisherId = 3m,
                            description = "opis33331",
                            name = "wydawnictwo3"
                        },
                        new
                        {
                            publisherId = 4m,
                            description = "wszystko co związane z kosmosem",
                            name = "wydawnictwo kosmos"
                        },
                        new
                        {
                            publisherId = 5m,
                            description = "wydawnictwo skupione na książkach religinych",
                            name = "wydawnictwo katolickie"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Reader", b =>
                {
                    b.Property<decimal>("readerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(4)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("readerId"));

                    b.Property<int>("DaysBeforeReturn")
                        .HasColumnType("int");

                    b.Property<DateTime?>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("imageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("isAuthor")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("readerId");

                    b.ToTable("Reader");

                    b.HasData(
                        new
                        {
                            readerId = 1m,
                            DaysBeforeReturn = 0,
                            birthDate = new DateTime(2001, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "jan.kowalski@gmail.com",
                            isAuthor = false,
                            name = "Jan",
                            surname = "Kowalski"
                        },
                        new
                        {
                            readerId = 2m,
                            DaysBeforeReturn = 0,
                            birthDate = new DateTime(1982, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "glowa123@gmail.com",
                            isAuthor = false,
                            name = "Karol",
                            surname = "Głowacki"
                        },
                        new
                        {
                            readerId = 3m,
                            DaysBeforeReturn = 0,
                            birthDate = new DateTime(2000, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "ibruska00@poczta.onet.com",
                            isAuthor = false,
                            name = "Ida",
                            surname = "Bruska"
                        },
                        new
                        {
                            readerId = 4m,
                            DaysBeforeReturn = 0,
                            birthDate = new DateTime(2002, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "juliaww@gmail.com",
                            isAuthor = false,
                            name = "Julia",
                            surname = "Kowalska"
                        },
                        new
                        {
                            readerId = 5m,
                            DaysBeforeReturn = 0,
                            birthDate = new DateTime(1998, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "kanialek@wp.pl",
                            isAuthor = false,
                            name = "Eryk",
                            surname = "Kańczyk"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Reader_Borrowings", b =>
                {
                    b.Property<decimal>("readerId")
                        .HasColumnType("NUMERIC(4,0)");

                    b.Property<decimal>("borrowId")
                        .HasColumnType("NUMERIC(5,0)");

                    b.HasKey("readerId", "borrowId");

                    b.HasIndex("borrowId");

                    b.ToTable("Reader_Borrowings", (string)null);

                    b.HasData(
                        new
                        {
                            readerId = 1m,
                            borrowId = 1m
                        },
                        new
                        {
                            readerId = 2m,
                            borrowId = 2m
                        },
                        new
                        {
                            readerId = 3m,
                            borrowId = 3m
                        },
                        new
                        {
                            readerId = 4m,
                            borrowId = 4m
                        },
                        new
                        {
                            readerId = 5m,
                            borrowId = 5m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Room", b =>
                {
                    b.Property<decimal>("roomNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(2)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("roomNumber"));

                    b.Property<decimal>("roomTypeId")
                        .HasColumnType("NUMERIC(2,0)");

                    b.Property<decimal>("seatCount")
                        .HasColumnType("NUMERIC(2)");

                    b.HasKey("roomNumber");

                    b.HasIndex("roomTypeId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            roomNumber = 1m,
                            roomTypeId = 1m,
                            seatCount = 5m
                        },
                        new
                        {
                            roomNumber = 2m,
                            roomTypeId = 3m,
                            seatCount = 4m
                        },
                        new
                        {
                            roomNumber = 3m,
                            roomTypeId = 3m,
                            seatCount = 3m
                        },
                        new
                        {
                            roomNumber = 4m,
                            roomTypeId = 2m,
                            seatCount = 2m
                        },
                        new
                        {
                            roomNumber = 5m,
                            roomTypeId = 1m,
                            seatCount = 1m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.RoomReservation", b =>
                {
                    b.Property<decimal>("reservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(4)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("reservationId"));

                    b.Property<bool>("Confirmation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("begginingOfReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("employeeId")
                        .HasColumnType("NUMERIC(2,0)");

                    b.Property<DateTime>("endOfReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("readerId")
                        .HasColumnType("NUMERIC(4,0)");

                    b.Property<decimal>("roomId")
                        .HasColumnType("NUMERIC(2,0)");

                    b.HasKey("reservationId");

                    b.HasIndex("employeeId");

                    b.HasIndex("readerId");

                    b.HasIndex("roomId");

                    b.ToTable("RoomReservation");

                    b.HasData(
                        new
                        {
                            reservationId = 1m,
                            Confirmation = false,
                            begginingOfReservationDate = new DateTime(2024, 3, 22, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            endOfReservationDate = new DateTime(2024, 3, 22, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            readerId = 1m,
                            roomId = 1m
                        },
                        new
                        {
                            reservationId = 2m,
                            Confirmation = false,
                            begginingOfReservationDate = new DateTime(2024, 3, 22, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            endOfReservationDate = new DateTime(2024, 3, 22, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            readerId = 2m,
                            roomId = 2m
                        },
                        new
                        {
                            reservationId = 3m,
                            Confirmation = false,
                            begginingOfReservationDate = new DateTime(2024, 3, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            endOfReservationDate = new DateTime(2024, 3, 22, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            readerId = 3m,
                            roomId = 3m
                        },
                        new
                        {
                            reservationId = 4m,
                            Confirmation = false,
                            begginingOfReservationDate = new DateTime(2024, 3, 25, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            endOfReservationDate = new DateTime(2024, 3, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            readerId = 4m,
                            roomId = 4m
                        },
                        new
                        {
                            reservationId = 5m,
                            Confirmation = false,
                            begginingOfReservationDate = new DateTime(2024, 3, 27, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            endOfReservationDate = new DateTime(2024, 3, 22, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            readerId = 5m,
                            roomId = 5m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.RoomType", b =>
                {
                    b.Property<decimal>("roomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(2)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("roomTypeId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("price")
                        .HasColumnType("NUMERIC(5,2)");

                    b.HasKey("roomTypeId");

                    b.ToTable("RoomType");

                    b.HasData(
                        new
                        {
                            roomTypeId = 1m,
                            name = "Sala konferecyjna",
                            price = 200m
                        },
                        new
                        {
                            roomTypeId = 2m,
                            name = "Sala multimedialna",
                            price = 400m
                        },
                        new
                        {
                            roomTypeId = 3m,
                            name = "Pracownia komputerowa",
                            price = 100.5m
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Suggestion", b =>
                {
                    b.Property<decimal>("suggestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(4)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("suggestionId"));

                    b.Property<string>("author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("votes")
                        .HasColumnType("NUMERIC(4)");

                    b.HasKey("suggestionId");

                    b.ToTable("Suggestion");
                });

            modelBuilder.Entity("Biblioteka.Models.Tag", b =>
                {
                    b.Property<decimal>("tagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMERIC(2)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("tagId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("tagId");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            tagId = 1m,
                            name = "tag1"
                        },
                        new
                        {
                            tagId = 2m,
                            name = "tag2"
                        },
                        new
                        {
                            tagId = 3m,
                            name = "tag3"
                        },
                        new
                        {
                            tagId = 4m,
                            name = "tag4"
                        },
                        new
                        {
                            tagId = 5m,
                            name = "tag5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.HasOne("Biblioteka.Models.Genre", "genre")
                        .WithMany("books")
                        .HasForeignKey("genreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Publisher", "publisher")
                        .WithMany("books")
                        .HasForeignKey("publisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.BookType", "type")
                        .WithMany("books")
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("genre");

                    b.Navigation("publisher");

                    b.Navigation("type");
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Author", b =>
                {
                    b.HasOne("Biblioteka.Models.Author", "author")
                        .WithMany("books")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Book", "book")
                        .WithMany("authors")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("book");
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Opinions", b =>
                {
                    b.HasOne("Biblioteka.Models.Book", "book")
                        .WithMany("opinions")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Reader", "reader")
                        .WithMany("bookOpinions")
                        .HasForeignKey("readerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("reader");
                });

            modelBuilder.Entity("Biblioteka.Models.Book_Tag", b =>
                {
                    b.HasOne("Biblioteka.Models.Book", "book")
                        .WithMany("tags")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Tag", "tag")
                        .WithMany("books")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("Biblioteka.Models.Borrowing", b =>
                {
                    b.HasOne("Biblioteka.Models.Book", "book")
                        .WithMany("borrowings")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.EmployeeConfirmingPayment", "employeeConfirmingPayment")
                        .WithMany()
                        .HasForeignKey("employeeConfirmingPaymentId");

                    b.HasOne("Biblioteka.Models.EmployeeConfirmingReturn", "employeeConfirmingReturn")
                        .WithMany()
                        .HasForeignKey("employeeConfirmingReturnId")
                        .HasConstraintName("FK_Borrowing_EmployeeConfirm~1");

                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithMany("borrowings")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("employee");

                    b.Navigation("employeeConfirmingPayment");

                    b.Navigation("employeeConfirmingReturn");
                });

            modelBuilder.Entity("Biblioteka.Models.Employee", b =>
                {
                    b.HasOne("Biblioteka.Models.Position", "position")
                        .WithMany("employees")
                        .HasForeignKey("positionId");

                    b.Navigation("position");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeConfirmingPayment", b =>
                {
                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithMany("paymentConfirmation")
                        .HasForeignKey("employeeId");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeConfirmingReturn", b =>
                {
                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithMany("returnConfirmations")
                        .HasForeignKey("employeeId");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Biblioteka.Models.EmployeeData", b =>
                {
                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithOne("employeeData")
                        .HasForeignKey("Biblioteka.Models.EmployeeData", "employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Biblioteka.Models.Event", b =>
                {
                    b.HasOne("Biblioteka.Models.Author", "author")
                        .WithMany("events")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("Biblioteka.Models.Reader_Borrowings", b =>
                {
                    b.HasOne("Biblioteka.Models.Borrowing", "borrow")
                        .WithMany("readers")
                        .HasForeignKey("borrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Reader", "reader")
                        .WithMany("borrowings")
                        .HasForeignKey("readerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("borrow");

                    b.Navigation("reader");
                });

            modelBuilder.Entity("Biblioteka.Models.Room", b =>
                {
                    b.HasOne("Biblioteka.Models.RoomType", "roomType")
                        .WithMany("rooms")
                        .HasForeignKey("roomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roomType");
                });

            modelBuilder.Entity("Biblioteka.Models.RoomReservation", b =>
                {
                    b.HasOne("Biblioteka.Models.Employee", "employee")
                        .WithMany("reservations")
                        .HasForeignKey("employeeId");

                    b.HasOne("Biblioteka.Models.Reader", "reader")
                        .WithMany("reservations")
                        .HasForeignKey("readerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Room", "room")
                        .WithMany("reservations")
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("reader");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Biblioteka.Areas.Identity.Data.BibUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Biblioteka.Areas.Identity.Data.BibUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Areas.Identity.Data.BibUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Biblioteka.Areas.Identity.Data.BibUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biblioteka.Models.Author", b =>
                {
                    b.Navigation("books");

                    b.Navigation("events");
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.Navigation("authors");

                    b.Navigation("borrowings");

                    b.Navigation("opinions");

                    b.Navigation("tags");
                });

            modelBuilder.Entity("Biblioteka.Models.BookType", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Biblioteka.Models.Borrowing", b =>
                {
                    b.Navigation("readers");
                });

            modelBuilder.Entity("Biblioteka.Models.Employee", b =>
                {
                    b.Navigation("borrowings");

                    b.Navigation("employeeData");

                    b.Navigation("paymentConfirmation");

                    b.Navigation("reservations");

                    b.Navigation("returnConfirmations");
                });

            modelBuilder.Entity("Biblioteka.Models.Genre", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Biblioteka.Models.Position", b =>
                {
                    b.Navigation("employees");
                });

            modelBuilder.Entity("Biblioteka.Models.Publisher", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Biblioteka.Models.Reader", b =>
                {
                    b.Navigation("bookOpinions");

                    b.Navigation("borrowings");

                    b.Navigation("reservations");
                });

            modelBuilder.Entity("Biblioteka.Models.Room", b =>
                {
                    b.Navigation("reservations");
                });

            modelBuilder.Entity("Biblioteka.Models.RoomType", b =>
                {
                    b.Navigation("rooms");
                });

            modelBuilder.Entity("Biblioteka.Models.Tag", b =>
                {
                    b.Navigation("books");
                });
#pragma warning restore 612, 618
        }
    }
}
